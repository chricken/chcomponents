'use strict';

import template from './template.js';

class chRange extends HTMLElement {
    constructor() {
        super();
        this.root = this.attachShadow({
            mode: 'closed'
        })
        this.root.append(template.cloneNode(true));

        // Objekt, um Elemente in dieser Component zwischenzuspeichern
        this.elements = {};
        this.domMapping();
    }

    // Nicht-String-Atribute übergeben
    update({
        value = null,
        min = null,
        max = null,
        step = null,
        bgColor = null,
        width = null,
        fontSize = null,
    } = {}) {

        if (value != null) this.elements.input.value = value;
        console.log(value, min, max, step);

        if (value != null) this.elements.range.value = value;
        if (min != null) this.elements.range.min = min;
        if (max != null) this.elements.range.max = max;
        if (step != null) this.elements.range.step = step;

        if (bgColor != null) this.elements.container.style['background-color'] = bgColor;

        if (width != null) this.elements.input.style['width'] = width + 'px';

        if (fontSize != null) {
            this.elements.input.style['fontSize'] = fontSize + 'px';
            this.elements.input.style['padding'] = fontSize / 3 + 'px';
        }
    }


    // Componente rendern
    domMapping() {
        this.elements.input = this.root.querySelector('input[type="text"]');
        this.elements.range = this.root.querySelector('input[type="range"]');
        this.elements.btnClear = this.root.querySelector('.btnClear');
        this.elements.container = this.root.querySelector('.container');
        this.elements.parentInput = this.root.querySelector('.wrapperInput');
    }

    // Eventlistener für Mounting
    connectedCallback() {
        this.update();

        this.elements.btnClear.addEventListener('click', () => {
            this.elements.input.value = '';
            this.elements.input.focus();
        })

        // Range-Eingabe
        this.elements.range.addEventListener('input', evt => {
            this.elements.input.value = this.elements.range.value;
        })

        this.elements.range.addEventListener('change', evt => {
            this.elements.input.value = this.elements.range.value;
        })

        // Text-Eingabe
        this.elements.input.addEventListener('input', evt => {
            this.elements.range.value = this.elements.input.value;
            const myEvent = new CustomEvent('input', {
                detail: {
                    event: evt,
                    type: 'input',
                    value: this.elements.input.value,
                    key: evt.data
                }
            })
            this.dispatchEvent(myEvent);
        })

        this.elements.input.addEventListener('change', evt => {
            this.elements.range.value = this.elements.input.value;
            const myEvent = new CustomEvent('change', {
                detail: {
                    event: evt,
                    type: 'change',
                    value: this.elements.input.value,
                    key: evt.data
                }
            })
            this.dispatchEvent(myEvent);
        })

        this.elements.input.addEventListener('focus', evt => {
            const myEvent = new CustomEvent('focus', {
                detail: {
                    event: evt,
                    type: 'focus',
                    value: this.elements.input.value,
                }
            })
            this.dispatchEvent(myEvent);
        })

        this.elements.input.addEventListener('blur', evt => {
            const myEvent = new CustomEvent('blur', {
                detail: {
                    event: evt,
                    type: 'blur',
                    value: this.elements.input.value,
                }
            })
            this.dispatchEvent(myEvent);
        })

    }
}

customElements.define('ch-range', chRange);