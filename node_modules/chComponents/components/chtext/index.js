'use strict';

import template from './template.js';

class chInput extends HTMLElement {
    constructor() {
        super();
        this.root = this.attachShadow({
            mode: 'closed'
        })
        this.root.append(template.cloneNode(true));

        // Objekt, um Elemente in dieser Component zwischenzuspeichern
        this.elements = {};
        this.domMapping();
    }

    // Nicht-String-Atribute übergeben
    update({
        value = '',
        password = false,
        bgColor = false,
    } = {}) {
        if (value) this.elements.input.value = value;
        
        if (password) this.makeThisPW();
        else this.unmakeThisPW();

        if (bgColor) this.elements.container.style['background-color'] = bgColor;

        this.elements.btnClear.addEventListener('click', () => {
            this.elements.input.value = '';
            this.elements.input.focus();
        })

    }

    unmakeThisPW() {
        if (this.elements.iconEye) this.elements.iconEye.remove()
        this.elements.input.type = 'input';
    }
    makeThisPW() {
        let isVisible = false;
        this.elements.input.type = 'password';
        let eye = document.createElement('div');
        eye.innerHTML = 'inv';
        eye.className = 'eye transition';
        this.elements.parentInput.append(eye);
        this.elements.iconEye = eye;

        eye.addEventListener('click', () => {
            isVisible = !isVisible;
            if (isVisible) {
                eye.innerHTML = 'vis';
                this.elements.input.type = 'text';
            } else {
                eye.innerHTML = 'inv';
                this.elements.input.type = 'password';
            }
        })
    }

    // Componente rendern
    domMapping() {
        this.elements.input = this.root.querySelector('input');
        this.elements.btnClear = this.root.querySelector('.btnClear');
        this.elements.container = this.root.querySelector('.container');
        this.elements.parentInput = this.root.querySelector('.wrapperInput');
    }

    // Eventlistener für Mounting
    connectedCallback() {
        this.update();
    }
}

customElements.define('ch-input', chInput);